/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Pixel (https://sketchfab.com/stefan.lengyel1)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/medieval-fantasy-book-06d5a80a04fc4c5ab552759e9a97d91a
Title: Medieval Fantasy Book
*/

import { useGLTF, useAnimations } from '@react-three/drei'
import { React, useRef, useEffect } from 'react';
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'

import bookScene from '../assets/3d/Book.glb'

const Book = ({isRotating, setCurrentStage, setIsRotating,  ...props }) => {
  const bookRef = useRef()
  const { nodes, materials, animations } = useGLTF(bookScene)
  const { actions } = useAnimations(animations, bookRef)
  const {gl, viewport} = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = useRef(0.95);

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? 
     e.touches[0].clientX : 
     e.clientX;

     lastX.current = clientX
  }
  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }
  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    
    if (isRotating){
        const clientX = e.touches ? 
        e.touches[0].clientX : 
        e.clientX;

        const delta = (clientX - lastX.current) / viewport.width;

        bookRef.current.rotation.y += delta * 0.003 * Math.PI;
        lastX.current = clientX
        rotationSpeed.current = delta * 0.003 * Math.PI;  

    }

  }
  //create a smooth speed rotation
  const smoothRotationSpeed = useRef(0);

  const handleKeyDown = (e) => {
    if (e.key === 'ArrowLeft' || e.key === 'a') {
      if (!isRotating) setIsRotating(true);
      smoothRotationSpeed.current = 0.003 * Math.PI;
    } else if (e.key === 'ArrowRight' || e.key === 'd') {
      if (!isRotating) setIsRotating(true);
      smoothRotationSpeed.current = -0.003 * Math.PI;
    }
  };
  
  const handleKeyUp = (e) => {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'd' || e.key === 'a') {
      setIsRotating(false);
      smoothRotationSpeed.current = 0;
    }
  };
  
  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor.current;
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
      if (bookRef.current) {
        bookRef.current.rotation.y += rotationSpeed.current;
      }
    } else {

      rotationSpeed.current = smoothRotationSpeed.current;
      const rotation = bookRef.current ? bookRef.current.rotation.y : 0;
      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
  
  
      // Updating the rotation smoothly
      if (bookRef.current) {
        bookRef.current.rotation.y += rotationSpeed.current;
      }
  
      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 6.25:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.5:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 3.0:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });
  
  useEffect(() => {
    actions['The Life'].play();

    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);
    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, ]);

  return (
    <a.group ref={bookRef} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="dad255dd2cf24ae0bb357684e49722b4fbx" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="Scene" position={[-4.794, 0, 0.278]} rotation={[-Math.PI / 2, 0, 0]}>
                  <group name="Object_5" position={[-14, 15.788, 4.337]}>
                    <mesh
                      name="Scene_Texture-base_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Texture-base_0'].geometry}
                      material={materials['Texture-base']}
                    />
                    <mesh
                      name="Scene_Texture-base_0_1"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Texture-base_0_1'].geometry}
                      material={materials['Texture-base']}
                    />
                    <mesh
                      name="Scene_Texture-base-gloss-jpg_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Texture-base-gloss-jpg_0'].geometry}
                      material={materials['Texture-base-gloss-jpg']}
                    />
                    <mesh
                      name="Scene_Book-tittle_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Book-tittle_0'].geometry}
                      material={materials['Book-tittle']}
                    />
                  </group>
                  <group
                    name="Mill-wind-wheel"
                    position={[-35.783, -27.192, 3.888]}
                    rotation={[0.445, -0.447, -0.498]}>
                    <group
                      name="Object_11"
                      position={[-8.253, 39.884, -25.75]}
                      rotation={[-0.607, 0.138, 0.644]}>
                      <mesh
                        name="Mill-wind-wheel_Texture-base_0"
                        castShadow
                        receiveShadow
                        geometry={nodes['Mill-wind-wheel_Texture-base_0'].geometry}
                        material={materials['Texture-base']}
                      />
                    </group>
                  </group>
                  <group
                    name="Mill-water-wheel"
                    position={[3.708, -15.395, -0.444]}
                    rotation={[-1.92, 0, 0]}>
                    <group name="Object_14" position={[-17.708, 31.183, 4.781]}>
                      <mesh
                        name="Mill-water-wheel_Texture-base_0"
                        castShadow
                        receiveShadow
                        geometry={nodes['Mill-water-wheel_Texture-base_0'].geometry}
                        material={materials['Texture-base']}
                      />
                    </group>
                  </group>
                </group>
                <group
                  name="flag"
                  position={[-11.513, 12.497, -6.752]}
                  rotation={[-Math.PI / 2, 0, -Math.PI / 6]}>
                  <group name="Object_17" position={[-7.262, 9.035, -8.16]}>
                    <mesh
                      name="0"
                      castShadow
                      receiveShadow
                      geometry={nodes['0'].geometry}
                      material={materials['Texture-base']}
                      morphTargetDictionary={nodes['0'].morphTargetDictionary}
                      morphTargetInfluences={nodes['0'].morphTargetInfluences}
                    />
                  </group>
                </group>
                <group
                  name="flag-second"
                  position={[-11.494, 12.552, -26.245]}
                  rotation={[-Math.PI / 2, 0, 0]}>
                  <group name="Object_20" position={[-7.262, 9.035, -8.16]}>
                    <mesh
                      name="1"
                      castShadow
                      receiveShadow
                      geometry={nodes['1'].geometry}
                      material={materials['Texture-base']}
                      morphTargetDictionary={nodes['1'].morphTargetDictionary}
                      morphTargetInfluences={nodes['1'].morphTargetInfluences}
                    />
                  </group>
                </group>
                <group
                  name="Waterfall"
                  position={[-4.794, 0, 0.351]}
                  rotation={[-Math.PI / 2, 0, 0]}>
                  <group name="Object_23" position={[-14, 15.788, 4.337]}>
                    <mesh
                      name="Waterfall_Texture-base-gloss-jpg_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Waterfall_Texture-base-gloss-jpg_0'].geometry}
                      material={materials['Texture-base-gloss-jpg']}
                    />
                  </group>
                </group>
                <group
                  name="deers"
                  position={[-23.122, -0.049, 14.878]}
                  rotation={[-Math.PI / 2, 0, 0]}>
                  <group name="Object_26" position={[4.328, 30.387, 4.387]}>
                    <mesh
                      name="deers_Texture-base_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['deers_Texture-base_0'].geometry}
                      material={materials['Texture-base']}
                    />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
  )
}

export default Book;